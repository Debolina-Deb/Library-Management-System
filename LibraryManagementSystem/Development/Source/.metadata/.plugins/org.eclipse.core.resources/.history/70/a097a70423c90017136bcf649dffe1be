package com.cg.library.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.cg.library.entities.BookInventory;
import com.cg.library.entities.BookRegistration;
import com.cg.library.entities.BookTransaction;
import com.cg.library.entities.User;
import com.cg.library.util.Constants;
import com.cg.library.util.QueryMapper;

/**
 * Extraction of data from database takes place in this layer
 * 
 * @author parpatid
 */
@Repository
@Transactional
public class LibraryDaoImpl implements LibraryDao {
	private static Logger logger = Logger
			.getLogger(com.cg.library.dao.LibraryDaoImpl.class);
	static User user = new User();
	private String percent = "%";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Method used to get Book by bookId
	 * 
	 * @param id
	 */
	@Override
	public BookInventory getBookById(String bookId) {
		BookInventory book = entityManager.find(BookInventory.class, bookId);
		logger.info(Constants.bookRetrievedLog + bookId);
		return book;
	}

	/**
	 * Method used to get all books
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<BookInventory> getAllBooks() {
		Query query = entityManager.createNamedQuery(QueryMapper.getAllBooks);
		logger.info(Constants.bookInventoryListLog);
		return query.getResultList();
	}

	/**
	 * Method to get all requests
	 */
	@Override
	public List<BookRegistration> getAllRequests() {
		Query query = entityManager
				.createNamedQuery(QueryMapper.getAllRequests);
		@SuppressWarnings("unchecked")
		List<BookRegistration> requestList = query.getResultList();
		logger.info(Constants.bookRequestListLog);
		return requestList;
	}

	/**
	 * Method used to validate User
	 * 
	 * @param userName
	 * @param password
	 * @throws Exception
	 */
	@Override
	public User validateUser(String userName, String password) throws Exception {
		TypedQuery<User> query = entityManager.createQuery(
				QueryMapper.validateUser, User.class);
		query.setParameter("userName", userName);
		query.setParameter("password", password);
		User user1 = query.getSingleResult();
		user = user1;
		logger.info(Constants.userIdMessage + user1.getUserId());
		return user1;
	}

	/**
	 * Method used to insert Book into BookInventory
	 * 
	 * @param book
	 * @throws Exception
	 */
	@Override
	public BookInventory insertBook(BookInventory book) throws Exception {
		BookInventory bookNew = this.getBookById(book.getBookId());
		if (bookNew == null) {
			entityManager.persist(book);
			logger.info(Constants.bookInserted + book.getBookId());
		} else {
			entityManager.merge(book);
			logger.info(Constants.bookUpdated + book.getBookId());
		}
		return book;
	}

	/**
	 * Method used to get user details
	 * 
	 * @return user
	 * @throws Exception
	 */
	public User getUserDetails() {
		return user;
	}

	/**
	 * Method used to validate registration id
	 * 
	 * @param inpRegId
	 * @throws Exception
	 */
	@Override
	public BookRegistration getBookRegistration(int inputRegistrationId)
			throws Exception {
		BookRegistration reg = entityManager.find(BookRegistration.class,
				inputRegistrationId);
		logger.info(Constants.bookRegiteredLog + inputRegistrationId);
		return reg;
	}

	/**
	 * Method used to delete book by Id
	 * 
	 * @param bookId
	 * @throws Exception
	 */
	@Override
	public BookInventory deleteBookById(String bookId) throws Exception {
		BookInventory book = entityManager.find(BookInventory.class, bookId);
		entityManager.remove(book);
		logger.info(Constants.bookDeletedMessage + bookId);
		return book;
	}

	/**
	 * Method used to update quantity of book in BookInventory
	 * 
	 * @param bookId
	 * @param updateBy
	 * @throws Exception
	 */
	@Override
	public BookInventory updateBookQuantity(String bookId, int updateBy)
			throws Exception {
		BookInventory book = this.getBookById(bookId);
		book.setNoOfBooks(book.getNoOfBooks() + updateBy);
		entityManager.merge(book);
		entityManager.flush();
		logger.info(Constants.bookUpdated + book.getBookId());
		return book;
	}

	/**
	 * Method used to insert transaction details while issuing book
	 * 
	 * @param bookTransaction
	 * @throws Exception
	 */
	@Override
	public void issueBook(BookTransaction bookTransaction) throws Exception {
		entityManager.persist(bookTransaction);
		logger.info(Constants.bookIssuedMessage
				+ bookTransaction.getRegistrationId());
	}

	/**
	 * Method used to retrieve transaction after returning book
	 * 
	 * @param inputRegId
	 * @return transaction
	 * @throws Exception
	 */
	@Override
	public BookTransaction returnBookTransaction(int inputRegistrationId)
			throws Exception {
		BookTransaction transaction;
		TypedQuery<BookTransaction> query = entityManager.createQuery(
				QueryMapper.returnBook + inputRegistrationId,
				BookTransaction.class);
		transaction = query.getSingleResult();
		logger.info(Constants.bookTransactionLog + inputRegistrationId);
		return transaction;
	}

	/**
	 * Method used to update status after transaction
	 * 
	 * @param transaction
	 * @throws Exception
	 */
	@Override
	public void updateBookTransaction(BookTransaction bookTransaction)
			throws Exception {
		entityManager.merge(bookTransaction);
		logger.info(Constants.bookTransactionLog
				+ bookTransaction.getRegistrationId());
	}

	/**
	 * Method used to update registration table after transaction
	 * 
	 * @param registration
	 * @throws Exception
	 */
	@Override
	public void updateBookRegistration(BookRegistration bookRegistration)
			throws Exception {
		entityManager.merge(bookRegistration);
		logger.info(Constants.bookRegiteredLog
				+ bookRegistration.getRegistrationId());
	}

	/**
	 * Method used to request book
	 * 
	 * @param bookRequest
	 */
	@Override
	public BookRegistration requestBook(BookRegistration bookRequest)
			throws Exception {
		entityManager.persist(bookRequest);
		logger.info(Constants.bookRequestMessage
				+ bookRequest.getRegistrationId());
		return bookRequest;
	}

	/**
	 * Method used to add user to Users table
	 * 
	 * @param user
	 */
	@Override
	public User addUser(User user) throws Exception {
		entityManager.persist(user);
		logger.info(Constants.userAddedMessage + user.getUserId());
		return user;
	}

	/**
	 * Method to get request by status
	 * 
	 * @param status
	 * @throws Exception
	 */
	@Override
	public List<BookRegistration> getRequestByStatus(String status)
			throws Exception {
		TypedQuery<BookRegistration> query1 = entityManager.createQuery(
				QueryMapper.requestByStatus, BookRegistration.class);
		query1.setParameter("status", status);
		List<BookRegistration> requestList = query1.getResultList();
		logger.info(Constants.bookRequestListLog);
		return requestList;
	}

	/**
	 * Search book by author name
	 * 
	 * Author name is taken as input and the given query matches the authorName
	 * with the author present in BookInventory table and returns all book with
	 * that keyword
	 * 
	 * @param authorName
	 *            - Author name used to compare with the table column author
	 * @return books - List of books with the given author name
	 * @throws Exception
	 */
	@Override
	public List<BookInventory> searchBookByAuthor(String authorName)
			throws Exception {
		TypedQuery<BookInventory> query = entityManager.createQuery(
				QueryMapper.bookByAuthor, BookInventory.class);
		query.setParameter("authorName", percent + authorName + percent);
		List<BookInventory> books = query.getResultList();
		logger.info(Constants.bookRetrievedLog);
		return books;
	}

	/**
	 * Search book by Book Name
	 * 
	 * Book Name is given as input and the query matched the given name with the
	 * book name from the BookInventory table from database
	 * 
	 * @param bookName
	 *            - name of book to be searched
	 * @return books - all books with the given keyword as bookName
	 * @throws Exception
	 */
	@Override
	public List<BookInventory> searchBookByName(String bookName)
			throws Exception {
		TypedQuery<BookInventory> query = entityManager.createQuery(
				QueryMapper.bookByName, BookInventory.class);
		query.setParameter("bookName", percent + bookName + percent);
		List<BookInventory> books = query.getResultList();
		logger.info(Constants.bookRetrievedLog);
		return books;
	}
}
