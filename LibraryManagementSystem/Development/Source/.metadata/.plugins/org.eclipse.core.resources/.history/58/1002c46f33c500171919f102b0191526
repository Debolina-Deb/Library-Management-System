package com.cg.library.dao;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Period;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.cg.library.entities.BookInventory;
import com.cg.library.entities.BookRegistration;
import com.cg.library.entities.BookTransaction;
import com.cg.library.entities.Users;
import com.cg.library.exception.LibraryException;

/**
 * Extraction of data from database takes place in this layer
 * 
 * @author parpatid
 */
@Repository
@Transactional
public class LibraryDaoImpl implements ILibraryDao {

	/**
	 * Used to generate logger
	 */
	private static Logger logger = Logger
			.getLogger(com.cg.library.dao.LibraryDaoImpl.class);

	static public Users user = new Users();

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Method used to get Book by bookId
	 * 
	 * @param id
	 */
	@Override
	public BookInventory getBookById(String id) {
		BookInventory book = entityManager.find(BookInventory.class, id);
		return book;
	}

	/**
	 * Method used to get all books
	 */
	@Override
	public List<BookInventory> getAllBooks() {
		Query query = entityManager.createNamedQuery("getAllBooks");
		@SuppressWarnings("unchecked")
		List<BookInventory> bookList = query.getResultList();
		return bookList;
	}

	/**
	 * Method to get all requests
	 */
	@Override
	public List<BookRegistration> getAllRequest() {
		Query query = entityManager.createNamedQuery("getAllRequests");
		@SuppressWarnings("unchecked")
		List<BookRegistration> requestList = query.getResultList();
		return requestList;
	}

	/**
	 * Method to get count of books in inventory
	 * 
	 * @param bookId
	 */
	@Override
	public int getCountOfBooks(String bookId) throws LibraryException {
		try {
			TypedQuery<BookInventory> query1 = entityManager.createQuery(
					QueryMapper.getCountOfBooks + bookId, BookInventory.class);
			BookInventory booksInventory = query1.getSingleResult();
			return booksInventory.getNoOfBooks();
		} catch (Exception e) {
			throw new LibraryException("Book doesn't exists");
		}
	}

	/**
	 * Method used to validate User
	 * 
	 * @param userName
	 * @param password
	 */
	@Override
	public Users validateUser(String userName, String password)
			throws LibraryException {
			TypedQuery<Users> query = entityManager.createQuery(
					QueryMapper.validateUser, Users.class);
			query.setParameter("puserName", userName);
			query.setParameter("ppassword", password);
			Users user1 = query.getSingleResult();
			user = user1;
			logger.info("Valid User with user ID : " + user1.getUserId());
			return user1;
	}

	/**
	 * Method used to insert Book into BookInventory
	 * 
	 * @param book
	 */
	@Override
	public BookInventory insertBook(BookInventory book) throws LibraryException {
		try {

			BookInventory book1 = this.getBookById(book.getBookId());
			if (book1 == null) {
				entityManager.persist(book);
				logger.info("Book Inserted with Book ID : " + book.getBookId());
			} else {
				this.updateBookQuan(book.getBookId(), book.getNoOfBooks());
			}
			return book;
		} catch (PersistenceException pe) {
			logger.error(pe.getMessage());
			throw new LibraryException(pe.getMessage());
		}
	}

	public Users getUserDetails() {
		return user;
	}

	/**
	 * Method used to validate registration id
	 * 
	 * @param inpRegId
	 */
	@Override
	public BookRegistration validRegId(int inpRegId) throws LibraryException {
		try {
			BookRegistration reg = entityManager.find(BookRegistration.class,
					inpRegId);
			logger.info("Valid Registration ID");
			return reg;
		} catch (NoResultException ne) {
			logger.error(ne.getMessage());
			throw new LibraryException("Invlid Registration Id");
		}
	}

	/**
	 * Method used to delete book by Id
	 * 
	 * @param bookId
	 */
	@Override
	public BookInventory deleteBookById(String bookId) throws LibraryException {
		BookInventory book = null;
		try {
			book = entityManager.find(BookInventory.class, bookId);
			entityManager.remove(book);
			logger.info("Book with Id: " + bookId + " deleted successfully");
			return book;
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new LibraryException(e.getMessage());
		}
	}

	/**
	 * Method used to update quantity of book in BookInventory
	 * 
	 * @param bookId
	 * @param updateBy
	 */
	@Override
	public BookInventory updateBookQuan(String bookId, int updateBy)
			throws LibraryException {
		try {
			BookInventory inv = this.getBookById(bookId);
			inv.setNoOfBooks(inv.getNoOfBooks() + updateBy);
			entityManager.getTransaction().begin();
			entityManager.merge(inv);
			entityManager.getTransaction().commit();
			logger.info("Book with Id: " + bookId + " updated successfully");
			return inv;
		} catch (PersistenceException pe) {
			logger.error(pe.getMessage());
			throw new LibraryException(pe.getMessage());
		}
	}

	/**
	 * Method used to issue book with regId
	 * 
	 * @param registrationId
	 */
	@Override
	public void issueBook(int registrationId) throws LibraryException {
		try {
			// String qStr =
			// "SELECT t FROM BookRegistration t WHERE t.registrationId="+registrationId;
			TypedQuery<BookRegistration> query = entityManager.createQuery(
					QueryMapper.issueBook + registrationId,
					BookRegistration.class);
			BookRegistration registration = query.getSingleResult();
			BookTransaction bookTransaction = new BookTransaction();
			bookTransaction.setIssueDate(Date.valueOf(LocalDate.now()));
			bookTransaction.setRegistrationId(registrationId);
			// bookTransaction.setReturnDate(null);

			entityManager.getTransaction().begin();
			entityManager.persist(bookTransaction);
			entityManager.getTransaction().commit();
			// qStr =
			// "SELECT t FROM BookInventory t WHERE t.bookId="+registration.getBookId();
			TypedQuery<BookInventory> query1 = entityManager.createQuery(
					QueryMapper.updateIssueBook + registration.getBookId(),
					BookInventory.class);
			BookInventory booksInventory = query1.getSingleResult();
			booksInventory.setNoOfBooks(booksInventory.getNoOfBooks() - 1);
			entityManager.getTransaction().begin();
			entityManager.merge(booksInventory);
			entityManager.getTransaction().commit();

			logger.info("Book issued with registration ID: " + registrationId);

		} catch (NoResultException e) {
			logger.error(e.getMessage());
			throw new LibraryException("No such registration Id available");
		} catch (PersistenceException pe) {
			logger.error(pe.getMessage());
			throw new LibraryException(pe.getMessage());
		}
	}

	/**
	 * Method used to return book
	 * 
	 * @param inpRegId
	 */
	@Override
	public int returnBook(int inpRegId) throws LibraryException {
		int fine = -1;

		try {
			BookTransaction tran;
			// String qStr =
			// "SELECT t FROM BookTransaction t WHERE t.registrationId="+inpRegId;
			TypedQuery<BookTransaction> query = entityManager.createQuery(
					QueryMapper.returnBook + inpRegId, BookTransaction.class);
			tran = query.getSingleResult();
			fine = 0;
			BookRegistration reg = this.validRegId(inpRegId);
			LocalDate issue = tran.getIssueDate().toLocalDate();
			LocalDate today = LocalDate.now();
			LocalDate expReturn = issue.plusDays(15);
			int chk = Period.between(expReturn, today).getDays();
			if (chk > 0)
				fine = chk * 10; // fine is 10rs per day*************

			tran.setReturnDate(java.sql.Date.valueOf(today));
			tran.setFine(fine);
			entityManager.getTransaction().begin();
			entityManager.merge(tran);
			entityManager.getTransaction().commit();

			this.updateBookQuan(reg.getBookId(), 1);
			logger.info("Book returned with registration ID: " + inpRegId);
		} catch (NoResultException e) {
			logger.error(e.getMessage());
			throw new LibraryException("No such registration Id available");
		}
		return fine;
	}

	/**
	 * Method used to request book
	 * 
	 * @param bookRequest
	 */
	@Override
	public BookRegistration requestBook(BookRegistration bookRequest)
			throws LibraryException {
		try {
			entityManager.persist(bookRequest);
			logger.info("Book requested for user ID" + bookRequest.getUserId());
			return bookRequest;
		} catch (PersistenceException pe) {
			logger.error(pe.getMessage());
			throw new LibraryException(pe.getMessage());
		}
	}

	/**
	 * Method used to add user to Users table
	 * 
	 * @param user
	 */
	@Override
	public Users addUser(Users user) throws LibraryException {
		entityManager.persist(user);
		return user;
	}

}
